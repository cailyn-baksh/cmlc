package io.github.cailyn_baksh.cmlc;

import io.github.cailyn_baksh.cmlc.cedarml.CedarMLType;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.AttrSchema;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.CMLWidgetSchema;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.SetPropertySchema;
import io.github.cailyn_baksh.cmlc.utils.CodeWriter;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.thaiopensource.relaxng.jaxp.CompactSyntaxSchemaFactory;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public class CMLParser {
    public class CMLParseException extends Exception {
        private String msg;

        public CMLParseException(String message) {
            msg = message;
        }

        @Override
        public String getMessage() {
            return msg;
        }
    }

    public static final URL CML_SCHEMA = CMLParser.class.getClassLoader().getResource("cedarml.rnc");
    public static final URL CML_BUILTIN = CMLParser.class.getClassLoader().getResource("builtin.xml");

    public static final String GENERATED_COMMENT = """
            //
            // File generated by cmlc
            //
            """;

    private Document cmlDocument;
    private String srcFile;
    private String outDir;
    private String baseFileName;
    /** Identifies the file. Header files should append _H_ to this, and source files should append _C_. */
    private String fileIDSymbol;

    private Map<String, CMLWidgetSchema> widgetSchemas = new HashMap<>();

    public CMLParser(String srcFile, String outDir, String baseFileName) throws IOException, SAXException, ParserConfigurationException, CMLParseException {
        this.srcFile = srcFile;
        this.outDir = outDir;
        this.baseFileName = baseFileName;

        fileIDSymbol = "__CEDARML_" + baseFileName.toUpperCase();

        cmlDocument = loadXMLDocument(new File(srcFile));

        // Load widgets from document
        loadDocumentWidgets(cmlDocument);

        // Import builtins
        try {
            Document builtin = loadXMLDocument(new File(CML_BUILTIN.toURI()));
            loadDocumentWidgets(builtin);
        } catch (URISyntaxException e) {}  // simply will not happen

        // Import widgets
        NodeList importNodes = cmlDocument.getElementsByTagName("import");
        for (int i=0; i < importNodes.getLength(); ++i) {
            Element elem = (Element)importNodes.item(i);

            Document doc = loadXMLDocument(new File(elem.getAttribute("path")));
            loadDocumentWidgets(doc);
        }
    }

    private void loadDocumentWidgets(Document doc) {
        NodeList widgetNodes = doc.getElementsByTagName("widget");
        for (int i=0; i < widgetNodes.getLength(); ++i) {
            Element elem = (Element)widgetNodes.item(i);
            CMLWidgetSchema schema = new CMLWidgetSchema();

            // Set content type
            if (elem.hasAttribute("contentType")) {
                schema.contentType = CedarMLType.fromString(elem.getAttribute("contentType"));
            }

            // Load attrs
            NodeList attrNodes = elem.getElementsByTagName("attr");
            for (int j=0; j < attrNodes.getLength(); ++j) {
                Element attrElem = (Element)attrNodes.item(j);
                AttrSchema attrSchema = new AttrSchema();

                // Create new attr with type
                attrSchema.type = CedarMLType.fromString(attrElem.getAttribute("type"));

                // Set default value if applicable
                if (attrElem.hasAttribute("default")) {
                    attrSchema.defaultValue = attrElem.getAttribute("default");
                }

                // Add attr to widget schema
                schema.attrs.put(attrElem.getAttribute("name"), attrSchema);
            }

            NodeList ctorNodes = elem.getElementsByTagName("constructor");
            if (ctorNodes.getLength() > 0) {
                // There is a constructor defined for this widget
                Element ctorElem = (Element)ctorNodes.item(0);

                schema.ctor.name = ctorElem.getAttribute("name");

                // Get constructor parameters
                NodeList paramNodes = ctorElem.getElementsByTagName("param");
                for (int k=0; k < paramNodes.getLength(); ++k) {
                    schema.ctor.params.add(paramNodes.item(k).getTextContent());
                }
            }

            NodeList initNodes = elem.getElementsByTagName("init");
            if (initNodes.getLength() > 0) {
                // There is init code for this widget
                Element initElem = (Element)initNodes.item(0);

                if (initElem.getTagName().equals("set-property")) {
                    SetPropertySchema setPropertySchema = new SetPropertySchema();

                    setPropertySchema.name = initElem.getAttribute("name");
                    setPropertySchema.value = initElem.getTextContent();

                    schema.init.add(setPropertySchema);
                }
            }

            widgetSchemas.put(elem.getAttribute("name"), schema);
        }
    }

    private Document loadXMLDocument(File file) throws SAXException, ParserConfigurationException, IOException, CMLParseException {
        // FIXME: find a better way to do this (maybe an alternative to Jing?)
        LineNumberReader inputReader;

        // Validate file against schema
        SchemaFactory schemaFactory = CompactSyntaxSchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI);
        Schema schema = schemaFactory.newSchema(CML_SCHEMA);
        Validator validator = schema.newValidator();

        inputReader = new LineNumberReader(new FileReader(file));
        Source src = new StreamSource(inputReader);

        try {
            validator.validate(src);
        } catch (SAXException e) {
            throw new CMLParseException("%s:%d: %s".formatted(file, inputReader.getLineNumber(), e.getMessage()));
        }

        inputReader.close();

        // Load Document
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = dbFactory.newDocumentBuilder();
        Document doc = builder.parse(file);

        inputReader.close();

        return doc;
    }

    // TODO: refactor this to make it prettier
    public void generateC() throws IOException, CMLParseException {
        // Create PrintWriters for output
        CodeWriter source = new CodeWriter(outDir + baseFileName + ".c");
        CodeWriter header = new CodeWriter(outDir + baseFileName + ".h");

        // Write generator ID comments
        header.ln(GENERATED_COMMENT);
        source.ln(GENERATED_COMMENT);

        // Write beginning of header file
        header.ln(
                """
                #ifndef %1$s_H_
                #define %1$s_H_
                
                #ifndef __cplusplus
                extern "C" {
                #endif
                
                #include <stdint.h>
                #include <cedar.h>
                
                """,
                fileIDSymbol
        );

        source.ln("#define %s_C_", fileIDSymbol);

        // Include header file in source file
        source.ln("#include \"%s.h\"", baseFileName);

        // Declare globals
        generateGlobals(source, header);

        // Declare prototypes
        declarePrototypes(source, header);

        // Generate window functions
        NodeList windowNodes = cmlDocument.getElementsByTagName("window");
        for (int i=0; i < windowNodes.getLength(); ++i) {
            Element elem = (Element)windowNodes.item(i);

            // Get capitalized name
            String name = elem.getAttribute("name");
            name = name.substring(0, 1).toUpperCase() + name.substring(1);

            // Get event handler function
            String handler = elem.getAttribute("handler");

            NodeList colorNodes = elem.getElementsByTagName("colors");  // 0-1
            NodeList menuNodes = elem.getElementsByTagName("menu");  // 0-1
            NodeList timerNodes = elem.getElementsByTagName("timer");  // 0+
            NodeList bodyNodes = elem.getElementsByTagName("body");  // 1

            // Write method definition
            source.ln("void display%2$sWindow() {", handler, name);
            source.indent();
            source.ln("""
                    CedarWindow window;
                    cedar_initWindow(&window);
                    
                    cedar_RegisterEventHandler(window.handlers, %s);
                    
                    """, handler);

            // TODO: implement colors
            // Apply colors
            if (colorNodes.getLength() > 0) {

            }

            // Create menu
            if (menuNodes.getLength() > 0) {

            }

            // Add timers
            for (int j=0; j < timerNodes.getLength(); ++j) {
                Element timerElem = (Element)timerNodes.item(j);
                String timerID = timerElem.getAttribute("id");
                String period = timerElem.getAttribute("period");  // doesnt need to be parsed into a long since we turn it right back into a string
                source.ln("cedar_AddTimer(&window, %s, %s);", timerID, period);
            }

            // Generate body
            Element body = (Element)bodyNodes.item(0);
            for (Node node=body.getFirstChild(); node != null; node=node.getNextSibling()) {
                if (!(node instanceof Element)) continue;  // Only look at elements
                Element child = (Element)node;

                if (!widgetSchemas.containsKey(child.getTagName())) {
                    throw new CMLParseException("%s: Widget '%s' is undefined".formatted(srcFile, child.getTagName()));
                }

                CMLWidgetSchema schema = widgetSchemas.get(child.getTagName());

                String varName = child.getAttribute("var");  // The variable to assign this to

                if (varName == null && schema.init.size() > 0) {
                    // No variable name has been assigned to this widget, but we need a variable
                }

                source.ln("cedar_AddWidget(&window, "
                        + "");
            }

            // End of method
            source.ln("""
                    
                    cedar_Display(&window);
                    cedar_DestroyWindow(&window);
                    """);
            source.outdent();
            source.ln("}");
        }

        // Write end of include guards to header file
        header.ln("""
                
                #ifdef __cplusplus
                }
                #endif
                #endif  // %s_H_
                """, fileIDSymbol);

        header.flush();
        source.flush();

        header.close();
        source.close();
    }

    /**
     * Generate C code to declare globals. The generated code expects to be
     * outside a method definition.
     * @param src CodeWriter for the source file
     * @param inc CodeWriter for the header file
     */
    private void generateGlobals(CodeWriter src, CodeWriter inc) {
        NodeList globalList = cmlDocument.getElementsByTagName("global");

        // Don't declare externs in the source file
        inc.ln("#ifndef %s_C_", fileIDSymbol);

        for (int i=0; i < globalList.getLength(); ++i) {
            Element elem = (Element)globalList.item(i);
            String name = elem.getAttribute("name");

            // Write externs to header
            inc.ln("extern CedarWidget *%s;", name);

            // Write definitions to source
            src.ln("CedarWidget *%s = NULL;", name);
        }

        inc.ln("#endif  // %s_C_", fileIDSymbol);
    }

    /**
     * Create the name of the corresponding function for a window
     * @param winName The name of the window
     * @return The name of the function
     */
    private String funcName(String winName) {
        winName = winName.substring(0, 1).toUpperCase() + winName.substring(1);
        return "display" + winName + "Window";
    }

    /**
     * Generate the necessary function prototypes in the header and source
     * files.
     * @param src The CodeWriter for the source file.
     * @param inc The CodeWriter for the header file.
     */
    private void declarePrototypes(CodeWriter src, CodeWriter inc) {
        NodeList windowList = cmlDocument.getElementsByTagName("window");

        for (int i=0; i < windowList.getLength(); ++i) {
            Element elem = (Element)windowList.item(i);
            String fnName = funcName(elem.getAttribute("name"));
            String handler = elem.getAttribute("handler");

            inc.ln("void %s();", fnName);
            src.ln("extern CALLBACKRESULT %s(void *, EVENT, uint24_t);", handler);
        }
    }
}
