package io.github.cailyn_baksh.cmlc;

import io.github.cailyn_baksh.cmlc.cedarml.CedarMLType;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.AttrSchema;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.CMLWidgetSchema;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.ConstructorSchema;
import io.github.cailyn_baksh.cmlc.cedarml.widgets.SetPropertySchema;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.thaiopensource.relaxng.jaxp.CompactSyntaxSchemaFactory;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.*;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public class CMLParser {
    public class CMLParseException extends Exception {
        private String msg;

        public CMLParseException(String message) {
            msg = message;
        }

        @Override
        public String getMessage() {
            return msg;
        }
    }

    public static final URL CML_SCHEMA = CMLParser.class.getClassLoader().getResource("cedarml.rnc");

    public static final String GENERATED_COMMENT = """
            //
            // File generated by cmlc
            //
            """;

    private Document cmlDocument;
    private String outDir;
    private String baseFileName;

    private Map<String, CMLWidgetSchema> widgetSchemas = new HashMap<>();

    public CMLParser(String srcFile, String outDir, String baseFileName) throws IOException, SAXException, ParserConfigurationException, CMLParseException {
        this.outDir = outDir;
        this.baseFileName = baseFileName;

        cmlDocument = loadXMLDocument(srcFile);

        // Load widgets from document
        loadDocumentWidgets(cmlDocument);

        // Import widgets
        NodeList importNodes = cmlDocument.getElementsByTagName("import");
        for (int i=0; i < importNodes.getLength(); ++i) {
            Element elem = (Element)importNodes.item(i);

            Document doc = loadXMLDocument(elem.getAttribute("path"));
            loadDocumentWidgets(doc);
        }
    }

    private void loadDocumentWidgets(Document doc) {
        NodeList widgetNodes = doc.getElementsByTagName("widget");
        for (int i=0; i < widgetNodes.getLength(); ++i) {
            Element elem = (Element)widgetNodes.item(i);
            CMLWidgetSchema schema = new CMLWidgetSchema();

            // Set content type
            if (elem.hasAttribute("contentType")) {
                schema.contentType = CedarMLType.fromString(elem.getAttribute("contentType"));
            }

            // Load attrs
            NodeList attrNodes = elem.getElementsByTagName("attr");
            for (int j=0; j < attrNodes.getLength(); ++j) {
                Element attrElem = (Element)widgetNodes.item(j);
                AttrSchema attrSchema = new AttrSchema();

                // Create new attr with type
                attrSchema.type = CedarMLType.fromString(elem.getAttribute("type"));

                // Set default value if applicable
                if (attrElem.hasAttribute("default")) {
                    attrSchema.defaultValue = elem.getAttribute("default");
                }

                // Add attr to widget schema
                schema.attrs.put(attrElem.getAttribute("name"), attrSchema);
            }

            NodeList ctorNodes = elem.getElementsByTagName("constructor");
            if (ctorNodes.getLength() > 0) {
                // There is a constructor defined for this widget
                Element ctorElem = (Element)ctorNodes.item(0);

                schema.ctor.name = ctorElem.getAttribute("name");

                // Get constructor parameters
                NodeList paramNodes = ctorElem.getElementsByTagName("param");
                for (int k=0; k < paramNodes.getLength(); ++k) {
                    schema.ctor.params.add(paramNodes.item(k).getTextContent());
                }
            }

            NodeList initNodes = elem.getElementsByTagName("init");
            if (ctorNodes.getLength() > 0) {
                // There is init code for this widget
                Element initElem = (Element)initNodes.item(0);

                if (initElem.getTagName().equals("set-property")) {
                    SetPropertySchema setPropertySchema = new SetPropertySchema();

                    setPropertySchema.name = initElem.getAttribute("name");
                    setPropertySchema.value = initElem.getTextContent();

                    schema.init.add(setPropertySchema);
                }
            }

            widgetSchemas.put(elem.getAttribute("name"), schema);
        }
    }

    private Document loadXMLDocument(String file) throws SAXException, ParserConfigurationException, IOException, CMLParseException {
        // FIXME: find a better way to do this (maybe an alternative to Jing?)
        LineNumberReader inputReader;

        // Validate file against schema
        SchemaFactory schemaFactory = CompactSyntaxSchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI);
        Schema schema = schemaFactory.newSchema(CML_SCHEMA);
        Validator validator = schema.newValidator();

        inputReader = new LineNumberReader(new FileReader(file));
        Source src = new StreamSource(inputReader);

        try {
            validator.validate(src);
        } catch (SAXException e) {
            throw new CMLParseException("%s:%d: %s".formatted(file, inputReader.getLineNumber(), e.getMessage()));
        }

        inputReader.close();

        // Load Document
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = dbFactory.newDocumentBuilder();
        Document doc = builder.parse(file);

        inputReader.close();

        return doc;
    }

    public void generateC() throws IOException {
        // Create PrintWriters for output
        PrintWriter source = new PrintWriter(new FileWriter(outDir + baseFileName + ".c", false));
        PrintWriter header = new PrintWriter(new FileWriter(outDir + baseFileName + ".h", false));

        header.print(GENERATED_COMMENT);
        source.print(GENERATED_COMMENT);

        // Write beginning of header file
        header.printf("""
                #ifndef __CEDARML_%s_H_
                #define __CEDARML_%s_H_
                
                #ifdef __cplusplus
                extern "C" {
                #endif
                
                #include <uint24_t>\n
                """, baseFileName.toUpperCase(), baseFileName.toUpperCase());

        // Include header file in source file
        source.println("#include \"" + baseFileName + ".h\"\n");

        // Generate window functions
        NodeList windowNodes = cmlDocument.getElementsByTagName("window");
        for (int i=0; i < windowNodes.getLength(); ++i) {
            Element elem = (Element)windowNodes.item(i);

            // Get capitalized name
            String name = elem.getAttribute("name");
            name = name.substring(0, 1).toUpperCase() + name.substring(1);

            // Get event handler function
            String handler = elem.getAttribute("handler");

            NodeList colorNodes = elem.getElementsByTagName("colors");
            NodeList menuNodes = elem.getElementsByTagName("menu");
            NodeList timerNodes = elem.getElementsByTagName("timer");
            NodeList bodyNodes = elem.getElementsByTagName("body");

            // Extern the event handler
            source.printf("extern CALLBACKRESULT %s(void *, EVENT, uint24_t)\n", handler);

            // Write method prototype and definition
            header.printf("void display%sWindow();\n", name);
            source.printf("""
                    void display%sWindow() {
                        CedarWindow window;
                        cedar_initWindow(&window);
                        
                        cedar_RegisterEventHandler(window.handlers, %s);
                    """, name, handler);


            // TODO: implement colors
            if (colorNodes.getLength() > 0) {

            }

            // End of method
            source.print("""
                        cedar_Display(&window);
                        cedar_DestroyWindow(&window);
                    }
                    """);
        }

        // Write end of include guards to header file
        header.println("""
                
                #ifdef __cplusplus
                }
                #endif
                #endif
                """);

        header.flush();
        source.flush();

        header.close();
        source.close();
    }
}
